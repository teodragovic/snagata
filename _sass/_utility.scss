
/* FUNCTIONS */

@function em($font-px, $base: $base-font-size) {
    @return #{$font-px/$base}em;
}

// Convert shorthand to the 4-value syntax

@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  }
  @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  }
  @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  }
  @else {
    @return $shorthand;
  }
}

// Our variables
$base-font-family: 'Roboto', sans-serif;
$base-font-size:   18;
$base-font-weight: 400;
$small-font-size:  $base-font-size * 0.875;
$base-line-height: 1.4;

$spacing-unit:     30px;

$text-color:       #444;
$background-color: #fdfdfd;
$brand-color:      #2a7ae2;

$grey-color:       #DADADA;
$grey-color-light: lighten($grey-color, 40%);
$grey-color-dark:  darken($grey-color, 25%);

// Width of the content area
$content-width:    800px;

$on-palm:          600px;
$on-laptop:        800px;



// Use media queries like this:
// @include media-query($on-palm) {
//     .wrapper {
//         padding-right: $spacing-unit / 2;
//         padding-left: $spacing-unit / 2;
//     }
// }
@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}

@mixin at-min($size) {
    @media screen and (min-width: $size) {
        @content;
    }
}

@mixin at-max($size) {
    @media screen and (max-width: $size) {
        @content;
    }
}

// Sizing elements
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// Bourbon.io positioning mixin
@mixin position ($position: relative, $coordinates: null null null null) {

    @if type-of($position) == list {
        $coordinates: $position;
        $position: relative;
    }

    $coordinates: unpack($coordinates);

    $top: nth($coordinates, 1);
    $right: nth($coordinates, 2);
    $bottom: nth($coordinates, 3);
    $left: nth($coordinates, 4);

    position: $position;

    @if (not ($top == null)) {
        top: $top;
    }

    @if (not ($right == null)) {
        right: $right;
    }

    @if (not ($bottom == null)) {
        bottom: $bottom;
    }

    @if (not ($left == null)) {
        left: $left;
    }
}

// Positioning helper mixins
@mixin absolute($args) {
    @include position(absolute, $args);
}

@mixin fixed($args) {
    @include position(fixed, $args);
}

@mixin relative($args) {
    @include position(relative, $args);
}
